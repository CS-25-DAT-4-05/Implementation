package boltparser;

import AbstractSyntax.Statements.*;
    import AbstractSyntax.Expressions.*;
    import AbstractSyntax.Types.*;
    import java.util.ArrayList;



public class Parser {
	public static final int _EOF = 0;
	public static final int _IDENT = 1;
	public static final int _INTNUM = 2;
	public static final int _DOUBLENUM = 3;
	public static final int _CHARLIT = 4;
	public static final int maxT = 36;

	static final boolean _T = true;
	static final boolean _x = false;
	static final int minErrDist = 2;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;
	
	public Scanner scanner;
	public Errors errors;

	public Stmt mainNode = null; // This contains the AST generated by calling parser.Parse()

    public boolean hasErrors() {
        return errors.count > 0;
    }

/*------------------------------------------------------------------------*/
/* Token specification */


	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (String msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) {
				++errDist;
				break;
			}

			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	boolean StartOf (int s) {
		return set[s][la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}
	
	boolean WeakSeparator (int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) { Get(); return true; }
		else if (StartOf(repFol)) return false;
		else {
			SynErr(n);
			while (!(set[syFol][kind] || set[repFol][kind] || set[0][kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}
	
	Stmt  BOLT() {
		Stmt  result;
		result = null; 
		result = Program();
		mainNode = result; 
		return result;
	}

	Stmt  Program() {
		Stmt  result;
		result = null; ArrayList<Stmt> statements = new ArrayList<>(); 
		Stmt stmt = Statement();
		statements.add(stmt); 
		while (StartOf(1)) {
			stmt = Statement();
			statements.add(stmt); 
		}
		if (statements.size() == 1) {
		   result = statements.get(0);
		} else {
		   // Combine statements in reverse order to match your Comp implementation
		   result = statements.get(statements.size() - 1);
		   for (int i = statements.size() - 2; i >= 0; i--) {
		       result = new Comp(statements.get(i), result);
		   }
		}
		
		return result;
	}

	Stmt  Statement() {
		Stmt  result;
		result = null; 
		if (StartOf(2)) {
			result = SimpleStatement();
		} else if (la.kind == 11) {
			result = WhileStatement();
		} else if (la.kind == 17) {
			result = IfStatement();
		} else SynErr(37);
		return result;
	}

	Stmt  SimpleStatement() {
		Stmt  result;
		result = null; 
		if (StartOf(3)) {
			result = Declaration();
			Expect(5);
		} else if (la.kind == 1) {
			result = Assignment();
			Expect(5);
		} else SynErr(38);
		return result;
	}

	Stmt  WhileStatement() {
		Stmt  result;
		result = null; Expr condition = null; Stmt body = null; 
		Expect(11);
		Expect(12);
		condition = Expression();
		Expect(13);
		Expect(14);
		Expect(15);
		body = Statement();
		Expect(16);
		result = new While(body, condition); 
		return result;
	}

	Stmt  IfStatement() {
		Stmt  result;
		result = null; Expr condition = null; Stmt thenBranch = null; Stmt elseBranch = null; 
		Expect(17);
		Expect(12);
		condition = Expression();
		Expect(13);
		Expect(18);
		Expect(15);
		thenBranch = Statement();
		Expect(16);
		if (la.kind == 19) {
			Get();
			Expect(15);
			elseBranch = Statement();
			Expect(16);
		}
		result = new If(thenBranch, elseBranch, condition); 
		return result;
	}

	Stmt  Declaration() {
		Stmt  result;
		result = null; Expr initialValue = null; Stmt nextStmt = null; Type type = null; 
		type = Type();
		Expect(1);
		String id = t.val; 
		if (la.kind == 6) {
			Get();
			initialValue = Expression();
		}
		result = new Declaration(type, id, initialValue, nextStmt); 
		return result;
	}

	Stmt  Assignment() {
		Stmt  result;
		result = null; Expr expr = null; 
		Expect(1);
		String id = t.val; 
		Expect(6);
		expr = Expression();
		result = new Assign(id, expr); 
		return result;
	}

	Type  Type() {
		Type  result;
		result = null; 
		if (la.kind == 7) {
			Get();
			result = new SimpleType(SimpleTypesEnum.DOUBLE); 
		} else if (la.kind == 8) {
			Get();
			result = new SimpleType(SimpleTypesEnum.INT); 
		} else if (la.kind == 9) {
			Get();
			result = new SimpleType(SimpleTypesEnum.CHAR); 
		} else if (la.kind == 10) {
			Get();
			result = new SimpleType(SimpleTypesEnum.BOOL); 
		} else SynErr(39);
		return result;
	}

	Expr  Expression() {
		Expr  result;
		result = null; 
		result = OrExpression();
		return result;
	}

	Expr  OrExpression() {
		Expr  result;
		result = null; Expr temp; Expr right = null; 
		result = AndExpression();
		while (la.kind == 20) {
			Get();
			right = AndExpression();
			temp = result;
			result = new BinExpr(temp, right, Binoperator.OR);
			
		}
		return result;
	}

	Expr  AndExpression() {
		Expr  result;
		result = null; Expr temp; Expr right = null; 
		result = EqualityExpression();
		while (la.kind == 21) {
			Get();
			right = EqualityExpression();
			temp = result;
			result = new BinExpr(temp, right, Binoperator.AND);
			
		}
		return result;
	}

	Expr  EqualityExpression() {
		Expr  result;
		result = null; Expr temp; Binoperator opType = Binoperator.EQUAL; Expr right = null; 
		result = RelationalExpression();
		while (la.kind == 22 || la.kind == 23) {
			if (la.kind == 22) {
				Get();
				opType = Binoperator.EQUAL; 
			} else {
				Get();
				opType = Binoperator.NEQUAL; 
			}
			right = RelationalExpression();
			temp = result;
			result = new BinExpr(temp, right, opType);
			
		}
		return result;
	}

	Expr  RelationalExpression() {
		Expr  result;
		result = null; Expr temp; Binoperator opType = Binoperator.LT; Expr right = null; 
		result = AdditiveExpression();
		while (StartOf(4)) {
			if (la.kind == 24) {
				Get();
				opType = Binoperator.LT; 
			} else if (la.kind == 25) {
				Get();
				opType = Binoperator.LEQ; 
			} else if (la.kind == 26) {
				Get();
				opType = Binoperator.GT; 
			} else {
				Get();
				opType = Binoperator.GEQ; 
			}
			right = AdditiveExpression();
			temp = result;
			result = new BinExpr(temp, right, opType);
			
		}
		return result;
	}

	Expr  AdditiveExpression() {
		Expr  result;
		result = null; Expr temp; Binoperator opType = Binoperator.ADD; Expr right = null; 
		result = MultiplicativeExpression();
		while (la.kind == 28 || la.kind == 29) {
			if (la.kind == 28) {
				Get();
				opType = Binoperator.ADD; 
			} else {
				Get();
				opType = Binoperator.MINUS; 
			}
			right = MultiplicativeExpression();
			temp = result;
			result = new BinExpr(temp, right, opType);
			
		}
		return result;
	}

	Expr  MultiplicativeExpression() {
		Expr  result;
		result = null; Expr temp; Binoperator opType = Binoperator.TIMES; Expr right = null; 
		result = UnaryExpression();
		while (la.kind == 30 || la.kind == 31 || la.kind == 32) {
			if (la.kind == 30) {
				Get();
				opType = Binoperator.TIMES; 
			} else if (la.kind == 31) {
				Get();
				opType = Binoperator.DIV; 
			} else {
				Get();
				opType = Binoperator.MODULO; 
			}
			right = UnaryExpression();
			temp = result;
			result = new BinExpr(temp, right, opType);
			
		}
		return result;
	}

	Expr  UnaryExpression() {
		Expr  result;
		result = null; Expr operand = null; 
		if (la.kind == 33) {
			Get();
			operand = UnaryExpression();
			result = new UnExpr(operand, AbstractSyntax.Expressions.Unaryoperator.NOT); 
		} else if (la.kind == 29) {
			Get();
			operand = UnaryExpression();
			result = new UnExpr(operand, AbstractSyntax.Expressions.Unaryoperator.NEG); 
		} else if (StartOf(5)) {
			result = Primary();
		} else SynErr(40);
		return result;
	}

	Expr  Primary() {
		Expr  result;
		result = null; 
		switch (la.kind) {
		case 1: {
			Get();
			result = new Ident(t.val); 
			break;
		}
		case 2: {
			Get();
			result = new IntVal(Integer.parseInt(t.val)); 
			break;
		}
		case 3: {
			Get();
			result = new DoubleVal(Double.parseDouble(t.val)); 
			break;
		}
		case 4: {
			Get();
			String s = t.val;
			char charValue;
			if (s.length() == 3) {
			   // Normal character like 'a'
			   charValue = s.charAt(1);
			} else {
			   // Escaped character like '\n'
			   switch (s.charAt(2)) {
			       case 'n': charValue = '\n'; break;
			       case 't': charValue = '\t'; break;
			       case 'r': charValue = '\r'; break;
			       case '\\': charValue = '\\'; break;
			       case '\'': charValue = '\''; break;
			       default: charValue = s.charAt(2);
			   }
			}
			result = new CharVal(charValue);
			
			break;
		}
		case 34: {
			Get();
			result = new BoolVal(true); 
			break;
		}
		case 35: {
			Get();
			result = new BoolVal(false); 
			break;
		}
		case 12: {
			Get();
			Expr tempExpr = Expression();
			Expect(13);
			result = new ParenExpr(tempExpr); 
			break;
		}
		default: SynErr(41); break;
		}
		return result;
	}



	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
		BOLT();
		Expect(0);

		scanner.buffer.Close();
	}

	private static final boolean[][] set = {
		{_T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x},
		{_x,_T,_x,_x, _x,_x,_x,_T, _T,_T,_T,_T, _x,_x,_x,_x, _x,_T,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x},
		{_x,_T,_x,_x, _x,_x,_x,_T, _T,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_T, _T,_T,_T,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x},
		{_x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _T,_T,_T,_T, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x},
		{_x,_T,_T,_T, _T,_x,_x,_x, _x,_x,_x,_x, _T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_T,_T, _x,_x}

	};
} // end Parser


class Errors {
	public int count = 0;                                    // number of errors detected
	public java.io.PrintStream errorStream = System.out;     // error messages go to this stream
	public String errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text
	
	protected void printMsg(int line, int column, String msg) {
		StringBuffer b = new StringBuffer(errMsgFormat);
		int pos = b.indexOf("{0}");
		if (pos >= 0) { b.delete(pos, pos+3); b.insert(pos, line); }
		pos = b.indexOf("{1}");
		if (pos >= 0) { b.delete(pos, pos+3); b.insert(pos, column); }
		pos = b.indexOf("{2}");
		if (pos >= 0) b.replace(pos, pos+3, msg);
		errorStream.println(b.toString());
	}
	
	public void SynErr (int line, int col, int n) {
		String s;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "IDENT expected"; break;
			case 2: s = "INTNUM expected"; break;
			case 3: s = "DOUBLENUM expected"; break;
			case 4: s = "CHARLIT expected"; break;
			case 5: s = "\";\" expected"; break;
			case 6: s = "\":=\" expected"; break;
			case 7: s = "\"double\" expected"; break;
			case 8: s = "\"int\" expected"; break;
			case 9: s = "\"char\" expected"; break;
			case 10: s = "\"bool\" expected"; break;
			case 11: s = "\"while\" expected"; break;
			case 12: s = "\"(\" expected"; break;
			case 13: s = "\")\" expected"; break;
			case 14: s = "\"do\" expected"; break;
			case 15: s = "\"{\" expected"; break;
			case 16: s = "\"}\" expected"; break;
			case 17: s = "\"if\" expected"; break;
			case 18: s = "\"then\" expected"; break;
			case 19: s = "\"else\" expected"; break;
			case 20: s = "\"||\" expected"; break;
			case 21: s = "\"&&\" expected"; break;
			case 22: s = "\"==\" expected"; break;
			case 23: s = "\"!=\" expected"; break;
			case 24: s = "\"<\" expected"; break;
			case 25: s = "\"<=\" expected"; break;
			case 26: s = "\">\" expected"; break;
			case 27: s = "\">=\" expected"; break;
			case 28: s = "\"+\" expected"; break;
			case 29: s = "\"-\" expected"; break;
			case 30: s = "\"*\" expected"; break;
			case 31: s = "\"/\" expected"; break;
			case 32: s = "\"%\" expected"; break;
			case 33: s = "\"!\" expected"; break;
			case 34: s = "\"true\" expected"; break;
			case 35: s = "\"false\" expected"; break;
			case 36: s = "??? expected"; break;
			case 37: s = "invalid Statement"; break;
			case 38: s = "invalid SimpleStatement"; break;
			case 39: s = "invalid Type"; break;
			case 40: s = "invalid UnaryExpression"; break;
			case 41: s = "invalid Primary"; break;
			default: s = "error " + n; break;
		}
		printMsg(line, col, s);
		count++;
	}

	public void SemErr (int line, int col, String s) {	
		printMsg(line, col, s);
		count++;
	}
	
	public void SemErr (String s) {
		errorStream.println(s);
		count++;
	}
	
	public void Warning (int line, int col, String s) {	
		printMsg(line, col, s);
	}
	
	public void Warning (String s) {
		errorStream.println(s);
	}
} // Errors


class FatalError extends RuntimeException {
	public static final long serialVersionUID = 1L;
	public FatalError(String s) { super(s); }
}
